use std::iter::Iterator;
use std::slice::Iter;

// Glyph data lifted from Matt Godbolt's [jsbeeb][1]
//
// [1]: https://github.com/mattgodbolt/jsbeeb
//
const GLYPH_DATA: [u8; 60 * 95] = [
        // 0x21 '!'
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x22 '"'
    0,0,0,0,0,0,
    0,0,1,0,1,0,
    0,0,1,0,1,0,
    0,0,1,0,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x23 ' British Pound'
    0,0,0,0,0,0,
    0,0,0,1,1,0,
    0,0,1,0,0,1,
    0,0,1,0,0,0,
    0,1,1,1,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x24 '$'
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,1,0,1,
    0,1,0,1,0,0,
    0,0,1,1,1,0,
    0,0,0,1,0,1,
    0,1,0,1,0,1,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x25 '%'
    0,0,0,0,0,0,
    0,1,1,0,0,0,
    0,1,1,0,0,1,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,1,0,0,1,1,
    0,0,0,0,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x26 '&'
    0,0,0,0,0,0,
    0,0,1,0,0,0,
    0,1,0,1,0,0,
    0,1,0,1,0,0,
    0,0,1,0,0,0,
    0,1,0,1,0,1,
    0,1,0,0,1,0,
    0,0,1,1,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x27 '''
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x28 '('
    0,0,0,0,0,0,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x29 ')'
    0,0,0,0,0,0,
    0,0,1,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,1,0,
    0,0,0,0,1,0,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x2a '*'
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,1,0,1,0,1,
    0,0,1,1,1,0,
    0,0,0,1,0,0,
    0,0,1,1,1,0,
    0,1,0,1,0,1,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x2b '+'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,1,1,1,1,1,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x2c ','
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x2d '-'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x2e '.'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x2f '/'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,1,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,1,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x30 '0'
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,1,0,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,0,1,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x31 '1'
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,1,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x32 '2'
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,0,0,0,0,1,
    0,0,0,1,1,0,
    0,0,1,0,0,0,
    0,1,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x33 '3'
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,1,
    0,0,0,0,1,0,
    0,0,0,1,1,0,
    0,0,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x34 '4'
    0,0,0,0,0,0,
    0,0,0,0,1,0,
    0,0,0,1,1,0,
    0,0,1,0,1,0,
    0,1,0,0,1,0,
    0,1,1,1,1,1,
    0,0,0,0,1,0,
    0,0,0,0,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x35 '5'
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,1,0,0,0,0,
    0,1,1,1,1,0,
    0,0,0,0,0,1,
    0,0,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x36 '6'
    0,0,0,0,0,0,
    0,0,0,1,1,0,
    0,0,1,0,0,0,
    0,1,0,0,0,0,
    0,1,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x37 '7'
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,1,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x38 '8'
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x39 '9'
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,1,
    0,0,0,0,0,1,
    0,0,0,0,1,0,
    0,0,1,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x3a ':'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x3b ';'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x3c '<'
    0,0,0,0,0,0,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,1,0,0,0,0,
    0,0,1,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x3d '='
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x3e '>'
    0,0,0,0,0,0,
    0,0,1,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,1,0,
    0,0,0,0,0,1,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x3f '?'
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x40 '@'
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,1,1,1,
    0,1,0,1,0,1,
    0,1,0,1,1,1,
    0,1,0,0,0,0,
    0,0,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x41 'A'
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,1,0,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,1,1,1,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x42 'B'
    0,0,0,0,0,0,
    0,1,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x43 'C'
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,1,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x44 'D'
    0,0,0,0,0,0,
    0,1,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x45 'E'
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,1,1,1,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x46 'F'
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,1,1,1,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x47 'G'
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,1,1,
    0,1,0,0,0,1,
    0,0,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x48 'H'
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,1,1,1,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x49 'I'
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x4a 'J'
    0,0,0,0,0,0,
    0,0,0,0,0,1,
    0,0,0,0,0,1,
    0,0,0,0,0,1,
    0,0,0,0,0,1,
    0,0,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x4b 'K'
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,0,0,1,0,
    0,1,0,1,0,0,
    0,1,1,0,0,0,
    0,1,0,1,0,0,
    0,1,0,0,1,0,
    0,1,0,0,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x4c 'L'
    0,0,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x4d 'M'
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,1,0,1,1,
    0,1,0,1,0,1,
    0,1,0,1,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x4e 'N'
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,1,0,0,1,
    0,1,0,1,0,1,
    0,1,0,0,1,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x4f 'O'
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x50 'P'
    0,0,0,0,0,0,
    0,1,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,1,1,1,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x51 'Q'
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,1,0,1,
    0,1,0,0,1,0,
    0,0,1,1,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x52 'R'
    0,0,0,0,0,0,
    0,1,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,1,1,1,0,
    0,1,0,1,0,0,
    0,1,0,0,1,0,
    0,1,0,0,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x53 'S'
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,0,
    0,0,1,1,1,0,
    0,0,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x54 'T'
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x55 'U'
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x56 'V'
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,0,1,0,
    0,0,1,0,1,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x57 'W'
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,1,0,1,
    0,1,0,1,0,1,
    0,1,0,1,0,1,
    0,0,1,0,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x58 'X'
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,0,1,0,
    0,0,0,1,0,0,
    0,0,1,0,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x59 'Y'
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,0,1,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x5a 'Z'
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,1,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,1,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x5b Left Arrow
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,1,1,1,1,1,
    0,0,1,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x5c ' 1/2 symbol'
    0,0,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,1,1,0,
    0,0,0,0,0,1,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,0,1,1,1
        , // 0x5d Right Arrow
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,1,0,
    0,1,1,1,1,1,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x5e Up Arrow
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,1,1,1,0,
    0,1,0,1,0,1,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x5f '#'
    0,0,0,0,0,0,
    0,0,1,0,1,0,
    0,0,1,0,1,0,
    0,1,1,1,1,1,
    0,0,1,0,1,0,
    0,1,1,1,1,1,
    0,0,1,0,1,0,
    0,0,1,0,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x60 '_'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x61 'a'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,0,0,0,0,1,
    0,0,1,1,1,1,
    0,1,0,0,0,1,
    0,0,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x62 'b'
    0,0,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x63 'c'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,1,1,1,1,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,0,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x64 'd'
    0,0,0,0,0,0,
    0,0,0,0,0,1,
    0,0,0,0,0,1,
    0,0,1,1,1,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x65 'e'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,1,1,1,1,1,
    0,1,0,0,0,0,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x66 'f'
    0,0,0,0,0,0,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,1,1,1,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x67 'g'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,1,1,1,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,1,
    0,0,0,0,0,1,
    0,0,1,1,1,0
        , // 0x68 'h'
    0,0,0,0,0,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0,
    0,1,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x69 'i'
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,1,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x6a 'j'
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,0,0,0,0,0
        , // 0x6b 'k'
    0,0,0,0,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,1,
    0,0,1,0,1,0,
    0,0,1,1,0,0,
    0,0,1,0,1,0,
    0,0,1,0,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x6c 'l'
    0,0,0,0,0,0,
    0,0,1,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x6d 'm'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,1,1,0,1,0,
    0,1,0,1,0,1,
    0,1,0,1,0,1,
    0,1,0,1,0,1,
    0,1,0,1,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x6e 'n'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,1,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x6f 'o'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x70 'p'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,1,1,1,1,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,1,1,1,0,
    0,1,0,0,0,0,
    0,1,0,0,0,0
        , // 0x71 'q'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,1,1,1,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,1,
    0,0,0,0,0,1,
    0,0,0,0,0,1
        , // 0x72 'r'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,1,0,1,1,
    0,0,1,1,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x73 's'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,1,1,1,1,
    0,1,0,0,0,0,
    0,0,1,1,1,0,
    0,0,0,0,0,1,
    0,1,1,1,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x74 't'
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,1,1,1,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,1,0,0,
    0,0,0,0,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x75 'u'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x76 'v'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,0,1,0,
    0,0,1,0,1,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x77 'w'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,1,0,1,
    0,1,0,1,0,1,
    0,0,1,0,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x78 'x'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,0,1,0,1,0,
    0,0,0,1,0,0,
    0,0,1,0,1,0,
    0,1,0,0,0,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x79 'y'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,1,0,0,0,1,
    0,0,1,1,1,1,
    0,0,0,0,0,1,
    0,0,1,1,1,0
        , // 0x7a 'z'
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,1,0,
    0,0,0,1,0,0,
    0,0,1,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x7b 'one fourth symbol'
    0,0,0,0,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,0,
    0,0,1,0,0,1,
    0,0,0,0,1,1,
    0,0,0,1,0,1,
    0,0,0,1,1,1,
    0,0,0,0,0,1
        , // 0x7c '|'
    0,0,0,0,0,0,
    0,0,1,0,1,0,
    0,0,1,0,1,0,
    0,0,1,0,1,0,
    0,0,1,0,1,0,
    0,0,1,0,1,0,
    0,0,1,0,1,0,
    0,0,1,0,1,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x7d ' three fourths symbol'
    0,0,0,0,0,0,
    0,1,1,0,0,0,
    0,0,0,1,0,0,
    0,1,1,0,0,0,
    0,0,0,1,0,0,
    0,1,1,0,0,1,
    0,0,0,0,1,1,
    0,0,0,1,0,1,
    0,0,0,1,1,1,
    0,0,0,0,0,1
        , // 0x7e Divide
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,1,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0,
    0,0,0,0,0,0
        , // 0x7f Block
    0,0,0,0,0,0,
    0,1,1,1,1,1,
    0,1,1,1,1,1,
    0,1,1,1,1,1,
    0,1,1,1,1,1,
    0,1,1,1,1,1,
    0,1,1,1,1,1,
    0,1,1,1,1,1,
    0,0,0,0,0,0,
    0,0,0,0,0,0
];

const GLYPH_WIDTH: usize = 6;
const GLYPH_HEIGHT: usize = 10;
const GLYPH_SIZE: usize = GLYPH_WIDTH * GLYPH_HEIGHT;

pub fn glyph<'a>(n: usize) -> Option<&'a [u8]> {
    if n >= (GLYPH_DATA.len() / GLYPH_SIZE) {
        None
    }
    else {
        Some(&GLYPH_DATA[GLYPH_SIZE * n..GLYPH_SIZE * (n + 1)])
    }
}

pub fn glyph_compact<'a>(n: usize) -> Option<CompactGlyph<'a>> {
    glyph(n).map(|bytes| CompactGlyph(bytes.iter()))
}

pub fn glyph_expand_rows<'a>(n: usize) -> Option<ExpandedRowsGlyph<'a>> {
    glyph_compact(n).map(|mut i| {
        let current = i.next();
        ExpandedRowsGlyph {
            inner: i,
            glyph_row: 1,
            output_row: 0,
            current: current,
        }
    })
}

pub fn expand_byte_to_u32_array(b: u8) -> [u32; 8] {
    let mut val = [0; 8];
    for n in 0..8_usize {
        let bit = b.rotate_left(n as _);
        if 0x80 == (bit & 0x80) {
            val[n] = 0xffffffff;
        }
    }

    val
}

pub struct CompactGlyph<'a>(Iter<'a, u8>);

impl<'a> Iterator for CompactGlyph<'a> {
    type Item = u8;

    fn next(&mut self) -> Option<Self::Item> {
        use std::cmp;

        let mut value = 0_u8;
        for bit in 0..GLYPH_WIDTH {
            match self.0.next() {
                Some(part) => value |= part << (7 - bit),
                None => return None,
            }
        }

        Some(value >> (8 - cmp::min(GLYPH_WIDTH, 8)))
    }
}

pub struct ExpandedRowsGlyph<'a> {
    inner: CompactGlyph<'a>,
    glyph_row: usize,
    output_row: usize, 
    current: Option<u8>
}

impl<'a> Iterator for ExpandedRowsGlyph<'a> {
    type Item = <CompactGlyph<'a> as Iterator>::Item;

    fn next(&mut self) -> Option<Self::Item> {
        if (self.output_row >> 1) == self.glyph_row {
            self.current = self.inner.next();
            self.glyph_row += 1;
        }
        self.output_row += 1;
        self.current
    }
}

#[cfg(test)]
mod glyph_should {
    use super::*;

    #[test]
    fn return_item_when_n_within_range() {
        assert!(glyph(3).is_some());
    }

    #[test]
    fn return_none_when_n_outside_range() {
        assert!(glyph(96).is_none());
    }

    #[test]
    fn return_the_correct_number_of_bytes() {
        assert_eq!(Some(60), glyph(50).map(|bytes| bytes.len()));
    }

    #[test]
    fn compact_to_single_column_of_bytes() {
        assert_eq!(Some(10), glyph_compact(1).map(|i| i.count()));

        let mut compact = glyph_compact(1).unwrap();
        let row_2 = compact.nth(1).unwrap();

        assert_eq!(0x0a, row_2);
    }

    #[test]
    fn expand_to_more_rows() {
        assert_eq!(Some(20), glyph_expand_rows(1).map(|i| i.count()));

        let mut compact = glyph_expand_rows(1).unwrap();
        let row_3 = compact.nth(2).unwrap();
        let row_4 = compact.next().unwrap();

        assert_eq!(0x0a, row_3);
        assert_eq!(0x0a, row_4);
    }
}

